// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'models/comment/comment.dart';
import 'models/configs/configs.dart';
import 'models/project/project.dart';
import 'models/space/space.dart';
import 'models/task/task.dart';
import 'models/task_details/task_details.dart';
import 'models/task_status/task_status.dart';
import 'models/user/user.dart';
import 'models/workspace/workspace.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4457092672811045211),
      name: 'Workspace',
      lastPropertyId: const IdUid(5, 7904942030907009503),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 352527237127235439),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4269280095025478687),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5398075115538317336),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7904942030907009503),
            name: 'belongsToId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 8871940445540955345),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(11, 857888771549376902),
            name: 'projects',
            targetId: const IdUid(3, 3348388344755759747))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4758389337228198835),
      name: 'Comment',
      lastPropertyId: const IdUid(6, 4768188333750703080),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4264315866317715404),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4110860993506188724),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6058151331346270265),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4768188333750703080),
            name: 'chatId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3348388344755759747),
      name: 'Project',
      lastPropertyId: const IdUid(5, 3811844683075990895),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7317595670289190097),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8949070744593014503),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5016210532765549503),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3167015192846028779),
            name: 'settingsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 5792564026788477082),
            relationTarget: 'ProjectSettings'),
        ModelProperty(
            id: const IdUid(5, 3811844683075990895),
            name: 'workspaceIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 1755622637998952890),
            relationTarget: 'Workspace')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 2282674462262986181),
            name: 'spaces',
            targetId: const IdUid(5, 416218293506911364)),
        ModelRelation(
            id: const IdUid(2, 4003131609710208149),
            name: 'tasks',
            targetId: const IdUid(10, 668691340192781713)),
        ModelRelation(
            id: const IdUid(3, 8156663267927026675),
            name: 'users',
            targetId: const IdUid(13, 599085024008558693))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5599679542027812634),
      name: 'ProjectSettings',
      lastPropertyId: const IdUid(3, 6540076496901507940),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 102737763826407561),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7090682760152044602),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6540076496901507940),
            name: 'localId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 416218293506911364),
      name: 'Space',
      lastPropertyId: const IdUid(7, 5489938292971952039),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5103460942873309306),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5227223453920745714),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3845456524033440797),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3306899641605640769),
            name: 'viewId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 6434032288057580920),
            relationTarget: 'SpaceView'),
        ModelProperty(
            id: const IdUid(5, 4325858145163858789),
            name: 'projectIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(5, 5603674740139576697),
            relationTarget: 'Project'),
        ModelProperty(
            id: const IdUid(6, 2776847407272999369),
            name: 'spaceType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5489938292971952039),
            name: 'settingsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(6, 141508014356347336),
            relationTarget: 'SpaceSettings')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(4, 5382598089704924904),
            name: 'subSpaces',
            targetId: const IdUid(5, 416218293506911364))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 2568798663836072200),
      name: 'SpaceSettings',
      lastPropertyId: const IdUid(2, 6011230819675171830),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4063808901623162172),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6011230819675171830),
            name: 'selected',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 8141941220174619261),
      name: 'SpaceSettingsBox',
      lastPropertyId: const IdUid(2, 1746396654528960728),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2382445159390895882),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1746396654528960728),
            name: 'selected',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 1884178888727387147),
      name: 'SpaceView',
      lastPropertyId: const IdUid(2, 8511907499616580854),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8275880959947560202),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8511907499616580854),
            name: 'onHovered',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 126297654268064936),
      name: 'SpaceViewBox',
      lastPropertyId: const IdUid(2, 2465385503786269174),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9031599487841101762),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2465385503786269174),
            name: 'onHovered',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 668691340192781713),
      name: 'Task',
      lastPropertyId: const IdUid(8, 8021354632851478087),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1177261102363249858),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2182582714712343974),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4922284296049637426),
            name: 'taskName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7127742682436902730),
            name: 'creatorIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(7, 6940125123627060583),
            relationTarget: 'User'),
        ModelProperty(
            id: const IdUid(5, 5708189522931136353),
            name: 'projectIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(8, 3245751979421865311),
            relationTarget: 'Project'),
        ModelProperty(
            id: const IdUid(6, 3273868291894409041),
            name: 'taskDetailsIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(9, 1977724266282894780),
            relationTarget: 'TaskDetails'),
        ModelProperty(
            id: const IdUid(7, 3421369547276579095),
            name: 'statusId',
            type: 11,
            flags: 520,
            indexId: const IdUid(10, 5834415805734941146),
            relationTarget: 'TaskStatus'),
        ModelProperty(
            id: const IdUid(8, 8021354632851478087),
            name: 'taskDetailsHash',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(5, 8875648209809234333),
            name: 'assignesId',
            targetId: const IdUid(13, 599085024008558693)),
        ModelRelation(
            id: const IdUid(6, 3588377484197133024),
            name: 'subTasks',
            targetId: const IdUid(10, 668691340192781713))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 188199304217904813),
      name: 'TaskDetails',
      lastPropertyId: const IdUid(4, 5172373956842404405),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1147930157334610833),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4326358525293033372),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7265242882409999090),
            name: 'hash',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5172373956842404405),
            name: 'content',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 599085024008558693),
      name: 'User',
      lastPropertyId: const IdUid(10, 6500922448306938868),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7407905113490621186),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3466097920580937853),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1059173384060340234),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3135759581543635767),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 823982089730389962),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7048461634904104579),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5613195657322232503),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 775481390736405986),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1523467690195499738),
            name: 'active',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 6500922448306938868),
            name: 'roleName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(7, 5784966577856649252),
            name: 'createdTasks',
            targetId: const IdUid(10, 668691340192781713)),
        ModelRelation(
            id: const IdUid(8, 5177653892162574174),
            name: 'assignedTasks',
            targetId: const IdUid(10, 668691340192781713)),
        ModelRelation(
            id: const IdUid(9, 6144273780863386834),
            name: 'comments',
            targetId: const IdUid(2, 4758389337228198835)),
        ModelRelation(
            id: const IdUid(10, 9039375274924292885),
            name: 'projects',
            targetId: const IdUid(3, 3348388344755759747))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 5185256598283999426),
      name: 'TaskStatus',
      lastPropertyId: const IdUid(4, 7238738493163669485),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9076657873575074115),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 811887765216743477),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3514448248679069502),
            name: 'color',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 5233531745739680630),
      name: 'SpaceBox',
      lastPropertyId: const IdUid(9, 2481751986101498792),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5755316987155909844),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7629158890122349122),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6209892199154019287),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5089385466157395547),
            name: 'settingsId',
            type: 11,
            flags: 520,
            indexId: const IdUid(11, 9014774979230805758),
            relationTarget: 'SpaceSettings'),
        ModelProperty(
            id: const IdUid(6, 8650134571625411726),
            name: 'viewId',
            type: 11,
            flags: 520,
            indexId: const IdUid(12, 1032819308735781024),
            relationTarget: 'SpaceView'),
        ModelProperty(
            id: const IdUid(7, 50316894840161047),
            name: 'spaceType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2481751986101498792),
            name: 'projectIdId',
            type: 11,
            flags: 520,
            indexId: const IdUid(13, 2366231920119172090),
            relationTarget: 'Project')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(12, 2358260114699359082),
            name: 'subSpaces',
            targetId: const IdUid(5, 416218293506911364))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(21, 4722199456347101809),
      name: 'AppConfigs',
      lastPropertyId: const IdUid(4, 8952288439879732633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1095817851718815729),
            name: 'oid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6769865188322356),
            name: 'initialized',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 746811092298587212),
            name: 'showSplash',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8952288439879732633),
            name: 'meId',
            type: 11,
            flags: 520,
            indexId: const IdUid(14, 5885576689302829196),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(21, 4722199456347101809),
      lastIndexId: const IdUid(14, 5885576689302829196),
      lastRelationId: const IdUid(12, 2358260114699359082),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        8416600187245671445,
        6833379649777905168,
        6608573879314445525,
        1744098807154474257,
        7186394406921338542,
        6014449136680129708
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1739559391261148613,
        7994390675229208157,
        8423738553689208890,
        8859915711347717922,
        2808084952509724806,
        875859673518189166,
        4066226470755942427,
        5978417029095110923,
        8085965844341386634,
        1136726109744807035,
        8461391272475480920,
        2690452863585814450,
        7747143318943954198,
        4965528203946182992,
        7923703706140111229,
        3914267508000628607,
        7238738493163669485,
        3731195532947766412,
        180219586393936214,
        1953671405657352601,
        7010859011007775909,
        7598963417255254553,
        4513413153117331644,
        3589144483930274688,
        6431793214300499069,
        6388786091700471094,
        3729068599794230303
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Workspace: EntityDefinition<Workspace>(
        model: _entities[0],
        toOneRelations: (Workspace object) => [object.belongsTo],
        toManyRelations: (Workspace object) =>
            {RelInfo<Workspace>.toMany(11, object.oid): object.projects},
        getId: (Workspace object) => object.oid,
        setId: (Workspace object, int id) {
          object.oid = id;
        },
        objectToFB: (Workspace object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(4, object.belongsTo.targetId);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Workspace(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              belongsTo: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              projects: ToMany());
          object.belongsTo.attach(store);
          InternalToManyAccess.setRelInfo(
              object.projects,
              store,
              RelInfo<Workspace>.toMany(11, object.oid),
              store.box<Workspace>());
          return object;
        }),
    Comment: EntityDefinition<Comment>(
        model: _entities[1],
        toOneRelations: (Comment object) => [],
        toManyRelations: (Comment object) => {},
        getId: (Comment object) => object.oid,
        setId: (Comment object, int id) {
          object.oid = id;
        },
        objectToFB: (Comment object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final contentOffset = fbb.writeString(object.content);
          final chatIdOffset = fbb.writeString(object.chatId);
          fbb.startTable(7);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(3, contentOffset);
          fbb.addOffset(5, chatIdOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Comment(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              chatId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    Project: EntityDefinition<Project>(
        model: _entities[2],
        toOneRelations: (Project object) =>
            [object.settings, object.workspaceId],
        toManyRelations: (Project object) => {
              RelInfo<Project>.toMany(1, object.oid): object.spaces,
              RelInfo<Project>.toMany(2, object.oid): object.tasks,
              RelInfo<Project>.toMany(3, object.oid): object.users
            },
        getId: (Project object) => object.oid,
        setId: (Project object, int id) {
          object.oid = id;
        },
        objectToFB: (Project object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.settings.targetId);
          fbb.addInt64(4, object.workspaceId.targetId);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Project(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              settings: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              workspaceId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              spaces: ToMany(),
              tasks: ToMany(),
              users: ToMany());
          object.settings.attach(store);
          object.workspaceId.attach(store);
          InternalToManyAccess.setRelInfo(object.spaces, store,
              RelInfo<Project>.toMany(1, object.oid), store.box<Project>());
          InternalToManyAccess.setRelInfo(object.tasks, store,
              RelInfo<Project>.toMany(2, object.oid), store.box<Project>());
          InternalToManyAccess.setRelInfo(object.users, store,
              RelInfo<Project>.toMany(3, object.oid), store.box<Project>());
          return object;
        }),
    ProjectSettings: EntityDefinition<ProjectSettings>(
        model: _entities[3],
        toOneRelations: (ProjectSettings object) => [],
        toManyRelations: (ProjectSettings object) => {},
        getId: (ProjectSettings object) => object.oid,
        setId: (ProjectSettings object, int id) {
          object.oid = id;
        },
        objectToFB: (ProjectSettings object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final localIdOffset =
              object.localId == null ? null : fbb.writeString(object.localId!);
          fbb.startTable(4);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, localIdOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProjectSettings(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              localId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        }),
    Space: EntityDefinition<Space>(
        model: _entities[4],
        toOneRelations: (Space object) =>
            [object.view, object.projectId, object.settings],
        toManyRelations: (Space object) =>
            {RelInfo<Space>.toMany(4, object.oid): object.subSpaces},
        getId: (Space object) => object.oid,
        setId: (Space object, int id) {
          object.oid = id;
        },
        objectToFB: (Space object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final spaceTypeOffset = fbb.writeString(object.spaceType);
          fbb.startTable(8);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(3, object.view.targetId);
          fbb.addInt64(4, object.projectId.targetId);
          fbb.addOffset(5, spaceTypeOffset);
          fbb.addInt64(6, object.settings.targetId);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Space(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              view: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              projectId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              spaceType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              settings: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 16, 0)),
              subSpaces: ToMany());
          object.view.attach(store);
          object.projectId.attach(store);
          object.settings.attach(store);
          InternalToManyAccess.setRelInfo(object.subSpaces, store,
              RelInfo<Space>.toMany(4, object.oid), store.box<Space>());
          return object;
        }),
    SpaceSettings: EntityDefinition<SpaceSettings>(
        model: _entities[5],
        toOneRelations: (SpaceSettings object) => [],
        toManyRelations: (SpaceSettings object) => {},
        getId: (SpaceSettings object) => object.oid,
        setId: (SpaceSettings object, int id) {
          object.oid = id;
        },
        objectToFB: (SpaceSettings object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.oid);
          fbb.addBool(1, object.selected);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpaceSettings(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              selected: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    SpaceSettingsBox: EntityDefinition<SpaceSettingsBox>(
        model: _entities[6],
        toOneRelations: (SpaceSettingsBox object) => [],
        toManyRelations: (SpaceSettingsBox object) => {},
        getId: (SpaceSettingsBox object) => object.oid,
        setId: (SpaceSettingsBox object, int id) {
          object.oid = id;
        },
        objectToFB: (SpaceSettingsBox object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.oid);
          fbb.addBool(1, object.selected);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpaceSettingsBox(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              selected: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    SpaceView: EntityDefinition<SpaceView>(
        model: _entities[7],
        toOneRelations: (SpaceView object) => [],
        toManyRelations: (SpaceView object) => {},
        getId: (SpaceView object) => object.oid,
        setId: (SpaceView object, int id) {
          object.oid = id;
        },
        objectToFB: (SpaceView object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.oid);
          fbb.addBool(1, object.onHovered);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpaceView(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              onHovered: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    SpaceViewBox: EntityDefinition<SpaceViewBox>(
        model: _entities[8],
        toOneRelations: (SpaceViewBox object) => [],
        toManyRelations: (SpaceViewBox object) => {},
        getId: (SpaceViewBox object) => object.oid,
        setId: (SpaceViewBox object, int id) {
          object.oid = id;
        },
        objectToFB: (SpaceViewBox object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.oid);
          fbb.addBool(1, object.onHovered);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpaceViewBox(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              onHovered: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 6, false));

          return object;
        }),
    Task: EntityDefinition<Task>(
        model: _entities[9],
        toOneRelations: (Task object) => [
              object.creatorId,
              object.projectId,
              object.taskDetailsId,
              object.status
            ],
        toManyRelations: (Task object) => {
              RelInfo<Task>.toMany(5, object.oid): object.assignesId,
              RelInfo<Task>.toMany(6, object.oid): object.subTasks
            },
        getId: (Task object) => object.oid,
        setId: (Task object, int id) {
          object.oid = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final taskNameOffset = fbb.writeString(object.taskName);
          final taskDetailsHashOffset = fbb.writeString(object.taskDetailsHash);
          fbb.startTable(9);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, taskNameOffset);
          fbb.addInt64(3, object.creatorId.targetId);
          fbb.addInt64(4, object.projectId.targetId);
          fbb.addInt64(5, object.taskDetailsId.targetId);
          fbb.addInt64(6, object.status.targetId);
          fbb.addOffset(7, taskDetailsHashOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Task(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              taskName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              creatorId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)),
              projectId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              taskDetailsId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              assignesId: ToMany(),
              subTasks: ToMany(),
              status:
                  ToOne(targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              taskDetailsHash: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''));
          object.creatorId.attach(store);
          object.projectId.attach(store);
          object.taskDetailsId.attach(store);
          object.status.attach(store);
          InternalToManyAccess.setRelInfo(object.assignesId, store,
              RelInfo<Task>.toMany(5, object.oid), store.box<Task>());
          InternalToManyAccess.setRelInfo(object.subTasks, store,
              RelInfo<Task>.toMany(6, object.oid), store.box<Task>());
          return object;
        }),
    TaskDetails: EntityDefinition<TaskDetails>(
        model: _entities[10],
        toOneRelations: (TaskDetails object) => [],
        toManyRelations: (TaskDetails object) => {},
        getId: (TaskDetails object) => object.oid,
        setId: (TaskDetails object, int id) {
          object.oid = id;
        },
        objectToFB: (TaskDetails object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final hashOffset = fbb.writeString(object.hash);
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(5);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, hashOffset);
          fbb.addOffset(3, contentOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskDetails(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              hash: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              content: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[11],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {
              RelInfo<User>.toMany(7, object.oid): object.createdTasks,
              RelInfo<User>.toMany(8, object.oid): object.assignedTasks,
              RelInfo<User>.toMany(9, object.oid): object.comments,
              RelInfo<User>.toMany(10, object.oid): object.projects
            },
        getId: (User object) => object.oid,
        setId: (User object, int id) {
          object.oid = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final usernameOffset = fbb.writeString(object.username);
          final firstNameOffset = object.firstName == null
              ? null
              : fbb.writeString(object.firstName!);
          final lastNameOffset = object.lastName == null
              ? null
              : fbb.writeString(object.lastName!);
          final passwordOffset = object.password == null
              ? null
              : fbb.writeString(object.password!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final roleNameOffset = object.roleName == null
              ? null
              : fbb.writeString(object.roleName!);
          fbb.startTable(11);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, firstNameOffset);
          fbb.addOffset(5, lastNameOffset);
          fbb.addOffset(6, passwordOffset);
          fbb.addOffset(7, emailOffset);
          fbb.addBool(8, object.active);
          fbb.addOffset(9, roleNameOffset);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              date: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              firstName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              lastName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              active: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 20, false),
              createdTasks: ToMany(),
              assignedTasks: ToMany(),
              comments: ToMany(),
              projects: ToMany(),
              roleName: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 22));
          InternalToManyAccess.setRelInfo(object.createdTasks, store,
              RelInfo<User>.toMany(7, object.oid), store.box<User>());
          InternalToManyAccess.setRelInfo(object.assignedTasks, store,
              RelInfo<User>.toMany(8, object.oid), store.box<User>());
          InternalToManyAccess.setRelInfo(object.comments, store,
              RelInfo<User>.toMany(9, object.oid), store.box<User>());
          InternalToManyAccess.setRelInfo(object.projects, store,
              RelInfo<User>.toMany(10, object.oid), store.box<User>());
          return object;
        }),
    TaskStatus: EntityDefinition<TaskStatus>(
        model: _entities[12],
        toOneRelations: (TaskStatus object) => [],
        toManyRelations: (TaskStatus object) => {},
        getId: (TaskStatus object) => object.oid,
        setId: (TaskStatus object, int id) {
          object.oid = id;
        },
        objectToFB: (TaskStatus object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.color);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TaskStatus(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              color:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));

          return object;
        }),
    SpaceBox: EntityDefinition<SpaceBox>(
        model: _entities[13],
        toOneRelations: (SpaceBox object) =>
            [object.settings, object.view, object.projectId],
        toManyRelations: (SpaceBox object) =>
            {RelInfo<SpaceBox>.toMany(12, object.oid): object.subSpaces},
        getId: (SpaceBox object) => object.oid,
        setId: (SpaceBox object, int id) {
          object.oid = id;
        },
        objectToFB: (SpaceBox object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          final spaceTypeOffset = fbb.writeString(object.spaceType);
          fbb.startTable(10);
          fbb.addInt64(0, object.oid);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addInt64(4, object.settings.targetId);
          fbb.addInt64(5, object.view.targetId);
          fbb.addOffset(6, spaceTypeOffset);
          fbb.addInt64(8, object.projectId.targetId);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SpaceBox(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              projectId: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 20, 0)),
              settings: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 12, 0)),
              view: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 14, 0)),
              spaceType: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              subSpaces: ToMany());
          object.settings.attach(store);
          object.view.attach(store);
          object.projectId.attach(store);
          InternalToManyAccess.setRelInfo(object.subSpaces, store,
              RelInfo<SpaceBox>.toMany(12, object.oid), store.box<SpaceBox>());
          return object;
        }),
    AppConfigs: EntityDefinition<AppConfigs>(
        model: _entities[14],
        toOneRelations: (AppConfigs object) => [object.me],
        toManyRelations: (AppConfigs object) => {},
        getId: (AppConfigs object) => object.oid,
        setId: (AppConfigs object, int id) {
          object.oid = id;
        },
        objectToFB: (AppConfigs object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.oid);
          fbb.addBool(1, object.initialized);
          fbb.addBool(2, object.showSplash);
          fbb.addInt64(3, object.me.targetId);
          fbb.finish(fbb.endTable());
          return object.oid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = AppConfigs(
              oid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              initialized:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false),
              showSplash:
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false),
              me: ToOne(
                  targetId: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0)));
          object.me.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Workspace] entity fields to define ObjectBox queries.
class Workspace_ {
  /// see [Workspace.oid]
  static final oid =
      QueryIntegerProperty<Workspace>(_entities[0].properties[0]);

  /// see [Workspace.id]
  static final id = QueryStringProperty<Workspace>(_entities[0].properties[1]);

  /// see [Workspace.name]
  static final name =
      QueryStringProperty<Workspace>(_entities[0].properties[2]);

  /// see [Workspace.belongsTo]
  static final belongsTo =
      QueryRelationToOne<Workspace, User>(_entities[0].properties[3]);

  /// see [Workspace.projects]
  static final projects =
      QueryRelationToMany<Workspace, Project>(_entities[0].relations[0]);
}

/// [Comment] entity fields to define ObjectBox queries.
class Comment_ {
  /// see [Comment.oid]
  static final oid = QueryIntegerProperty<Comment>(_entities[1].properties[0]);

  /// see [Comment.id]
  static final id = QueryStringProperty<Comment>(_entities[1].properties[1]);

  /// see [Comment.content]
  static final content =
      QueryStringProperty<Comment>(_entities[1].properties[2]);

  /// see [Comment.chatId]
  static final chatId =
      QueryStringProperty<Comment>(_entities[1].properties[3]);
}

/// [Project] entity fields to define ObjectBox queries.
class Project_ {
  /// see [Project.oid]
  static final oid = QueryIntegerProperty<Project>(_entities[2].properties[0]);

  /// see [Project.id]
  static final id = QueryStringProperty<Project>(_entities[2].properties[1]);

  /// see [Project.name]
  static final name = QueryStringProperty<Project>(_entities[2].properties[2]);

  /// see [Project.settings]
  static final settings =
      QueryRelationToOne<Project, ProjectSettings>(_entities[2].properties[3]);

  /// see [Project.workspaceId]
  static final workspaceId =
      QueryRelationToOne<Project, Workspace>(_entities[2].properties[4]);

  /// see [Project.spaces]
  static final spaces =
      QueryRelationToMany<Project, Space>(_entities[2].relations[0]);

  /// see [Project.tasks]
  static final tasks =
      QueryRelationToMany<Project, Task>(_entities[2].relations[1]);

  /// see [Project.users]
  static final users =
      QueryRelationToMany<Project, User>(_entities[2].relations[2]);
}

/// [ProjectSettings] entity fields to define ObjectBox queries.
class ProjectSettings_ {
  /// see [ProjectSettings.oid]
  static final oid =
      QueryIntegerProperty<ProjectSettings>(_entities[3].properties[0]);

  /// see [ProjectSettings.id]
  static final id =
      QueryStringProperty<ProjectSettings>(_entities[3].properties[1]);

  /// see [ProjectSettings.localId]
  static final localId =
      QueryStringProperty<ProjectSettings>(_entities[3].properties[2]);
}

/// [Space] entity fields to define ObjectBox queries.
class Space_ {
  /// see [Space.oid]
  static final oid = QueryIntegerProperty<Space>(_entities[4].properties[0]);

  /// see [Space.id]
  static final id = QueryStringProperty<Space>(_entities[4].properties[1]);

  /// see [Space.name]
  static final name = QueryStringProperty<Space>(_entities[4].properties[2]);

  /// see [Space.view]
  static final view =
      QueryRelationToOne<Space, SpaceView>(_entities[4].properties[3]);

  /// see [Space.projectId]
  static final projectId =
      QueryRelationToOne<Space, Project>(_entities[4].properties[4]);

  /// see [Space.spaceType]
  static final spaceType =
      QueryStringProperty<Space>(_entities[4].properties[5]);

  /// see [Space.settings]
  static final settings =
      QueryRelationToOne<Space, SpaceSettings>(_entities[4].properties[6]);

  /// see [Space.subSpaces]
  static final subSpaces =
      QueryRelationToMany<Space, Space>(_entities[4].relations[0]);
}

/// [SpaceSettings] entity fields to define ObjectBox queries.
class SpaceSettings_ {
  /// see [SpaceSettings.oid]
  static final oid =
      QueryIntegerProperty<SpaceSettings>(_entities[5].properties[0]);

  /// see [SpaceSettings.selected]
  static final selected =
      QueryBooleanProperty<SpaceSettings>(_entities[5].properties[1]);
}

/// [SpaceSettingsBox] entity fields to define ObjectBox queries.
class SpaceSettingsBox_ {
  /// see [SpaceSettingsBox.oid]
  static final oid =
      QueryIntegerProperty<SpaceSettingsBox>(_entities[6].properties[0]);

  /// see [SpaceSettingsBox.selected]
  static final selected =
      QueryBooleanProperty<SpaceSettingsBox>(_entities[6].properties[1]);
}

/// [SpaceView] entity fields to define ObjectBox queries.
class SpaceView_ {
  /// see [SpaceView.oid]
  static final oid =
      QueryIntegerProperty<SpaceView>(_entities[7].properties[0]);

  /// see [SpaceView.onHovered]
  static final onHovered =
      QueryBooleanProperty<SpaceView>(_entities[7].properties[1]);
}

/// [SpaceViewBox] entity fields to define ObjectBox queries.
class SpaceViewBox_ {
  /// see [SpaceViewBox.oid]
  static final oid =
      QueryIntegerProperty<SpaceViewBox>(_entities[8].properties[0]);

  /// see [SpaceViewBox.onHovered]
  static final onHovered =
      QueryBooleanProperty<SpaceViewBox>(_entities[8].properties[1]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.oid]
  static final oid = QueryIntegerProperty<Task>(_entities[9].properties[0]);

  /// see [Task.id]
  static final id = QueryStringProperty<Task>(_entities[9].properties[1]);

  /// see [Task.taskName]
  static final taskName = QueryStringProperty<Task>(_entities[9].properties[2]);

  /// see [Task.creatorId]
  static final creatorId =
      QueryRelationToOne<Task, User>(_entities[9].properties[3]);

  /// see [Task.projectId]
  static final projectId =
      QueryRelationToOne<Task, Project>(_entities[9].properties[4]);

  /// see [Task.taskDetailsId]
  static final taskDetailsId =
      QueryRelationToOne<Task, TaskDetails>(_entities[9].properties[5]);

  /// see [Task.status]
  static final status =
      QueryRelationToOne<Task, TaskStatus>(_entities[9].properties[6]);

  /// see [Task.taskDetailsHash]
  static final taskDetailsHash =
      QueryStringProperty<Task>(_entities[9].properties[7]);

  /// see [Task.assignesId]
  static final assignesId =
      QueryRelationToMany<Task, User>(_entities[9].relations[0]);

  /// see [Task.subTasks]
  static final subTasks =
      QueryRelationToMany<Task, Task>(_entities[9].relations[1]);
}

/// [TaskDetails] entity fields to define ObjectBox queries.
class TaskDetails_ {
  /// see [TaskDetails.oid]
  static final oid =
      QueryIntegerProperty<TaskDetails>(_entities[10].properties[0]);

  /// see [TaskDetails.id]
  static final id =
      QueryStringProperty<TaskDetails>(_entities[10].properties[1]);

  /// see [TaskDetails.hash]
  static final hash =
      QueryStringProperty<TaskDetails>(_entities[10].properties[2]);

  /// see [TaskDetails.content]
  static final content =
      QueryStringProperty<TaskDetails>(_entities[10].properties[3]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.oid]
  static final oid = QueryIntegerProperty<User>(_entities[11].properties[0]);

  /// see [User.id]
  static final id = QueryStringProperty<User>(_entities[11].properties[1]);

  /// see [User.username]
  static final username =
      QueryStringProperty<User>(_entities[11].properties[2]);

  /// see [User.date]
  static final date = QueryIntegerProperty<User>(_entities[11].properties[3]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[11].properties[4]);

  /// see [User.lastName]
  static final lastName =
      QueryStringProperty<User>(_entities[11].properties[5]);

  /// see [User.password]
  static final password =
      QueryStringProperty<User>(_entities[11].properties[6]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[11].properties[7]);

  /// see [User.active]
  static final active = QueryBooleanProperty<User>(_entities[11].properties[8]);

  /// see [User.roleName]
  static final roleName =
      QueryStringProperty<User>(_entities[11].properties[9]);

  /// see [User.createdTasks]
  static final createdTasks =
      QueryRelationToMany<User, Task>(_entities[11].relations[0]);

  /// see [User.assignedTasks]
  static final assignedTasks =
      QueryRelationToMany<User, Task>(_entities[11].relations[1]);

  /// see [User.comments]
  static final comments =
      QueryRelationToMany<User, Comment>(_entities[11].relations[2]);

  /// see [User.projects]
  static final projects =
      QueryRelationToMany<User, Project>(_entities[11].relations[3]);
}

/// [TaskStatus] entity fields to define ObjectBox queries.
class TaskStatus_ {
  /// see [TaskStatus.oid]
  static final oid =
      QueryIntegerProperty<TaskStatus>(_entities[12].properties[0]);

  /// see [TaskStatus.name]
  static final name =
      QueryStringProperty<TaskStatus>(_entities[12].properties[1]);

  /// see [TaskStatus.color]
  static final color =
      QueryIntegerProperty<TaskStatus>(_entities[12].properties[2]);
}

/// [SpaceBox] entity fields to define ObjectBox queries.
class SpaceBox_ {
  /// see [SpaceBox.oid]
  static final oid =
      QueryIntegerProperty<SpaceBox>(_entities[13].properties[0]);

  /// see [SpaceBox.id]
  static final id = QueryStringProperty<SpaceBox>(_entities[13].properties[1]);

  /// see [SpaceBox.name]
  static final name =
      QueryStringProperty<SpaceBox>(_entities[13].properties[2]);

  /// see [SpaceBox.settings]
  static final settings =
      QueryRelationToOne<SpaceBox, SpaceSettings>(_entities[13].properties[3]);

  /// see [SpaceBox.view]
  static final view =
      QueryRelationToOne<SpaceBox, SpaceView>(_entities[13].properties[4]);

  /// see [SpaceBox.spaceType]
  static final spaceType =
      QueryStringProperty<SpaceBox>(_entities[13].properties[5]);

  /// see [SpaceBox.projectId]
  static final projectId =
      QueryRelationToOne<SpaceBox, Project>(_entities[13].properties[6]);

  /// see [SpaceBox.subSpaces]
  static final subSpaces =
      QueryRelationToMany<SpaceBox, Space>(_entities[13].relations[0]);
}

/// [AppConfigs] entity fields to define ObjectBox queries.
class AppConfigs_ {
  /// see [AppConfigs.oid]
  static final oid =
      QueryIntegerProperty<AppConfigs>(_entities[14].properties[0]);

  /// see [AppConfigs.initialized]
  static final initialized =
      QueryBooleanProperty<AppConfigs>(_entities[14].properties[1]);

  /// see [AppConfigs.showSplash]
  static final showSplash =
      QueryBooleanProperty<AppConfigs>(_entities[14].properties[2]);

  /// see [AppConfigs.me]
  static final me =
      QueryRelationToOne<AppConfigs, User>(_entities[14].properties[3]);
}
